// Generated by purs version 0.11.6
"use strict";
var $foreign = require("./foreign");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Data_Posix = require("../Data.Posix");
var Data_Posix_Signal = require("../Data.Posix.Signal");
var Data_StrMap = require("../Data.StrMap");
var Node_Platform = require("../Node.Platform");
var Node_Stream = require("../Node.Stream");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var version = $foreign.process.version;
var stdoutIsTTY = $foreign.process.stdout.isTTY;
var stdout = $foreign.process.stdout;
var stdin = $foreign.process.stdin;
var stderrIsTTY = $foreign.process.stderr.isTTY;
var stderr = $foreign.process.stderr;
var platform = Data_Maybe.fromJust()(Node_Platform.fromString($foreign.process.platform));
var pid = $foreign.process.pid;
var onSignal = function (sig) {
    return $foreign.onSignalImpl(Data_Posix_Signal.toString(sig));
};
var mkEff = Unsafe_Coerce.unsafeCoerce;
var nextTick = function (callback) {
    return mkEff(function (v) {
        return $foreign.process.nextTick(callback);
    });
};
var getEnv = mkEff(function (v) {
    return $foreign.process.env;
});
var lookupEnv = function (k) {
    return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_StrMap.lookup(k))(getEnv);
};
var execPath = mkEff(function (v) {
    return $foreign.process.execPath;
});
var execArgv = mkEff(function (v) {
    return $foreign.process.execArgv;
});
var cwd = $foreign.process.cwd;
var argv = mkEff(function (v) {
    return $foreign.process.argv;
});
module.exports = {
    argv: argv, 
    cwd: cwd, 
    execArgv: execArgv, 
    execPath: execPath, 
    getEnv: getEnv, 
    lookupEnv: lookupEnv, 
    onSignal: onSignal, 
    pid: pid, 
    platform: platform, 
    stderr: stderr, 
    stderrIsTTY: stderrIsTTY, 
    stdin: stdin, 
    stdout: stdout, 
    stdoutIsTTY: stdoutIsTTY, 
    version: version, 
    chdir: $foreign.chdir, 
    exit: $foreign.exit, 
    onBeforeExit: $foreign.onBeforeExit, 
    onExit: $foreign.onExit, 
    setEnv: $foreign.setEnv
};
