// Generated by purs version 0.11.6
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Tuple = require("../Data.Tuple");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");
var whileM_ = function (dictMonad) {
    return function (p) {
        return function (f) {
            return Control_Bind.ifM(dictMonad.Bind1())(p)(Control_Apply.applySecond((dictMonad.Bind1()).Apply0())(f)(whileM_(dictMonad)(p)(f)))(Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit));
        };
    };
};
var whileM$prime = function (dictMonad) {
    return function (dictApplicative) {
        return function (dictMonoid) {
            return function (p) {
                return function (f) {
                    return Control_Bind.ifM(dictMonad.Bind1())(p)(Control_Bind.bind(dictMonad.Bind1())(f)(function (x) {
                        return Control_Bind.bind(dictMonad.Bind1())(whileM$prime(dictMonad)(dictApplicative)(dictMonoid)(p)(f))(function ($75) {
                            return Control_Applicative.pure(dictMonad.Applicative0())((function (v) {
                                return Data_Semigroup.append(dictMonoid.Semigroup0())(Control_Applicative.pure(dictApplicative)(x))(v);
                            })($75));
                        });
                    }))(Control_Applicative.pure(dictMonad.Applicative0())(Data_Monoid.mempty(dictMonoid)));
                };
            };
        };
    };
};
var whileM = function (dictMonad) {
    return whileM$prime(dictMonad)(Control_Applicative.applicativeArray)(Data_Monoid.monoidArray);
};
var whileJust_ = function (dictMonad) {
    return function (p) {
        return function (f) {
            return Control_Bind.bind(dictMonad.Bind1())(p)(Data_Maybe.maybe(Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit))(function (v) {
                return Control_Apply.applySecond((dictMonad.Bind1()).Apply0())(f(v))(whileJust_(dictMonad)(p)(f));
            }));
        };
    };
};
var whileJust$prime = function (dictMonad) {
    return function (dictApplicative) {
        return function (dictMonoid) {
            return function (p) {
                return function (f) {
                    return Control_Bind.bind(dictMonad.Bind1())(p)(Data_Maybe.maybe(Control_Applicative.pure(dictMonad.Applicative0())(Data_Monoid.mempty(dictMonoid)))(function (v) {
                        return Control_Bind.bind(dictMonad.Bind1())(f(v))(function (x) {
                            return Control_Bind.bind(dictMonad.Bind1())(whileJust$prime(dictMonad)(dictApplicative)(dictMonoid)(p)(f))(function ($76) {
                                return Control_Applicative.pure(dictMonad.Applicative0())((function (v1) {
                                    return Data_Semigroup.append(dictMonoid.Semigroup0())(Control_Applicative.pure(dictApplicative)(x))(v1);
                                })($76));
                            });
                        });
                    }));
                };
            };
        };
    };
};
var whileJust = function (dictMonad) {
    return whileJust$prime(dictMonad)(Control_Applicative.applicativeArray)(Data_Monoid.monoidArray);
};
var untilM_ = function (dictMonad) {
    return function (f) {
        return function (p) {
            return Control_Apply.applySecond((dictMonad.Bind1()).Apply0())(f)(whileM_(dictMonad)(p)(f));
        };
    };
};
var untilM$prime = function (dictMonad) {
    return function (dictApplicative) {
        return function (dictMonoid) {
            return function (f) {
                return function (p) {
                    return Control_Bind.bind(dictMonad.Bind1())(f)(function (x) {
                        return Control_Bind.bind(dictMonad.Bind1())(whileM$prime(dictMonad)(dictApplicative)(dictMonoid)(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(p))(f))(function ($77) {
                            return Control_Applicative.pure(dictMonad.Applicative0())((function (v) {
                                return Data_Semigroup.append(dictMonoid.Semigroup0())(Control_Applicative.pure(dictApplicative)(x))(v);
                            })($77));
                        });
                    });
                };
            };
        };
    };
};
var untilM = function (dictMonad) {
    return untilM$prime(dictMonad)(Control_Applicative.applicativeArray)(Data_Monoid.monoidArray);
};
var untilJust = function (dictMonad) {
    return function (m) {
        return Control_Bind.bind(dictMonad.Bind1())(m)(function (x) {
            return Data_Maybe.maybe(untilJust(dictMonad)(m))(Control_Applicative.pure(dictMonad.Applicative0()))(x);
        });
    };
};
var unfoldrM$prime = function (dictMonad) {
    return function (dictApplicative) {
        return function (dictMonoid) {
            return function (f) {
                var go = function (z) {
                    return Control_Bind.bind(dictMonad.Bind1())(f(z))(Data_Maybe.maybe(Control_Applicative.pure(dictMonad.Applicative0())(Data_Monoid.mempty(dictMonoid)))(function (v) {
                        return Control_Bind.bind(dictMonad.Bind1())(go(v.value1))(function ($78) {
                            return Control_Applicative.pure(dictMonad.Applicative0())((function (v1) {
                                return Data_Semigroup.append(dictMonoid.Semigroup0())(Control_Applicative.pure(dictApplicative)(v.value0))(v1);
                            })($78));
                        });
                    }));
                };
                return go;
            };
        };
    };
};
var unfoldrM = function (dictMonad) {
    return unfoldrM$prime(dictMonad)(Control_Applicative.applicativeArray)(Data_Monoid.monoidArray);
};
var unfoldM_ = function (dictMonad) {
    return Data_Function.flip(whileJust_(dictMonad))(Control_Applicative.pure(dictMonad.Applicative0()));
};
var unfoldM$prime = function (dictMonad) {
    return function (dictApplicative) {
        return function (dictMonoid) {
            return Data_Function.flip(whileJust$prime(dictMonad)(dictApplicative)(dictMonoid))(Control_Applicative.pure(dictMonad.Applicative0()));
        };
    };
};
var unfoldM = function (dictMonad) {
    return unfoldM$prime(dictMonad)(Control_Applicative.applicativeArray)(Data_Monoid.monoidArray);
};
var orM = function (dictMonad) {
    return function (v) {
        if (v instanceof Data_List_Types.Nil) {
            return Control_Applicative.pure(dictMonad.Applicative0())(false);
        };
        if (v instanceof Data_List_Types.Cons) {
            return Control_Bind.ifM(dictMonad.Bind1())(v.value0)(Control_Applicative.pure(dictMonad.Applicative0())(true))(orM(dictMonad)(v.value1));
        };
        throw new Error("Failed pattern match at Control.Monad.Loops line 139, column 1 - line 139, column 58: " + [ v.constructor.name ]);
    };
};
var iterateUntilM = function (dictMonad) {
    return function (p) {
        return function (f) {
            return function (v) {
                var $55 = p(v);
                if ($55) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(v);
                };
                return Control_Bind.bind(dictMonad.Bind1())(f(v))(iterateUntilM(dictMonad)(p)(f));
            };
        };
    };
};
var iterateUntil = function (dictMonad) {
    return function (p) {
        return function (x) {
            return Control_Bind.bind(dictMonad.Bind1())(x)(iterateUntilM(dictMonad)(p)(Data_Function["const"](x)));
        };
    };
};
var iterateWhile = function (dictMonad) {
    return function (p) {
        return iterateUntil(dictMonad)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(p));
    };
};
var anyPM = function (dictMonad) {
    return function (v) {
        return function (v1) {
            if (v instanceof Data_List_Types.Nil) {
                return Control_Applicative.pure(dictMonad.Applicative0())(false);
            };
            if (v instanceof Data_List_Types.Cons) {
                return Control_Bind.ifM(dictMonad.Bind1())(v.value0(v1))(Control_Applicative.pure(dictMonad.Applicative0())(true))(anyPM(dictMonad)(v.value1)(v1));
            };
            throw new Error("Failed pattern match at Control.Monad.Loops line 146, column 1 - line 146, column 74: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var anyM = function (dictMonad) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_List_Types.Nil) {
                return Control_Applicative.pure(dictMonad.Applicative0())(false);
            };
            if (v1 instanceof Data_List_Types.Cons) {
                return Control_Bind.ifM(dictMonad.Bind1())(v(v1.value0))(Control_Applicative.pure(dictMonad.Applicative0())(true))(anyM(dictMonad)(v)(v1.value1));
            };
            throw new Error("Failed pattern match at Control.Monad.Loops line 158, column 1 - line 158, column 71: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var andM = function (dictMonad) {
    return function (v) {
        if (v instanceof Data_List_Types.Nil) {
            return Control_Applicative.pure(dictMonad.Applicative0())(true);
        };
        if (v instanceof Data_List_Types.Cons) {
            return Control_Bind.ifM(dictMonad.Bind1())(v.value0)(andM(dictMonad)(v.value1))(Control_Applicative.pure(dictMonad.Applicative0())(false));
        };
        throw new Error("Failed pattern match at Control.Monad.Loops line 134, column 1 - line 134, column 61: " + [ v.constructor.name ]);
    };
};
var allPM = function (dictMonad) {
    return function (v) {
        return function (v1) {
            if (v instanceof Data_List_Types.Nil) {
                return Control_Applicative.pure(dictMonad.Applicative0())(true);
            };
            if (v instanceof Data_List_Types.Cons) {
                return Control_Bind.ifM(dictMonad.Bind1())(v.value0(v1))(allPM(dictMonad)(v.value1)(v1))(Control_Applicative.pure(dictMonad.Applicative0())(false));
            };
            throw new Error("Failed pattern match at Control.Monad.Loops line 153, column 1 - line 153, column 74: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var allM = function (dictMonad) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_List_Types.Nil) {
                return Control_Applicative.pure(dictMonad.Applicative0())(true);
            };
            if (v1 instanceof Data_List_Types.Cons) {
                return Control_Bind.ifM(dictMonad.Bind1())(v(v1.value0))(allM(dictMonad)(v)(v1.value1))(Control_Applicative.pure(dictMonad.Applicative0())(false));
            };
            throw new Error("Failed pattern match at Control.Monad.Loops line 163, column 1 - line 163, column 71: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
module.exports = {
    allM: allM, 
    allPM: allPM, 
    andM: andM, 
    anyM: anyM, 
    anyPM: anyPM, 
    iterateUntil: iterateUntil, 
    iterateUntilM: iterateUntilM, 
    iterateWhile: iterateWhile, 
    orM: orM, 
    unfoldM: unfoldM, 
    "unfoldM'": unfoldM$prime, 
    unfoldM_: unfoldM_, 
    unfoldrM: unfoldrM, 
    "unfoldrM'": unfoldrM$prime, 
    untilJust: untilJust, 
    untilM: untilM, 
    "untilM'": untilM$prime, 
    untilM_: untilM_, 
    whileJust: whileJust, 
    "whileJust'": whileJust$prime, 
    whileJust_: whileJust_, 
    whileM: whileM, 
    "whileM'": whileM$prime, 
    whileM_: whileM_
};
