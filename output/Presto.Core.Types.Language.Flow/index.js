// Generated by purs version 0.11.6
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Category = require("../Control.Category");
var Control_Monad_Aff_AVar = require("../Control.Monad.Aff.AVar");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_Free = require("../Control.Monad.Free");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Either = require("../Data.Either");
var Data_Exists = require("../Data.Exists");
var Data_Foreign_Class = require("../Data.Foreign.Class");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Data_Show = require("../Data.Show");
var Data_Time_Duration = require("../Data.Time.Duration");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");
var Presto_Core_Types_API = require("../Presto.Core.Types.API");
var Presto_Core_Types_App = require("../Presto.Core.Types.App");
var Presto_Core_Types_Language_APIInteract = require("../Presto.Core.Types.Language.APIInteract");
var Presto_Core_Types_Language_Interaction = require("../Presto.Core.Types.Language.Interaction");
var Presto_Core_Types_Language_Storage = require("../Presto.Core.Types.Language.Storage");
var Presto_Core_Types_Permission = require("../Presto.Core.Types.Permission");
var LocalStore = (function () {
    function LocalStore() {

    };
    LocalStore.value = new LocalStore();
    return LocalStore;
})();
var InMemoryStore = (function () {
    function InMemoryStore() {

    };
    InMemoryStore.value = new InMemoryStore();
    return InMemoryStore;
})();
var ThrowError = (function () {
    function ThrowError(value0) {
        this.value0 = value0;
    };
    ThrowError.create = function (value0) {
        return new ThrowError(value0);
    };
    return ThrowError;
})();
var ReturnResult = (function () {
    function ReturnResult(value0) {
        this.value0 = value0;
    };
    ReturnResult.create = function (value0) {
        return new ReturnResult(value0);
    };
    return ReturnResult;
})();
var Control = function (x) {
    return x;
};
var RegistrationTokens = (function () {
    function RegistrationTokens(value0) {
        this.value0 = value0;
    };
    RegistrationTokens.create = function (value0) {
        return new RegistrationTokens(value0);
    };
    return RegistrationTokens;
})();
var RunUI = (function () {
    function RunUI(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    RunUI.create = function (value0) {
        return function (value1) {
            return new RunUI(value0, value1);
        };
    };
    return RunUI;
})();
var ForkUI = (function () {
    function ForkUI(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ForkUI.create = function (value0) {
        return function (value1) {
            return new ForkUI(value0, value1);
        };
    };
    return ForkUI;
})();
var CallAPI = (function () {
    function CallAPI(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CallAPI.create = function (value0) {
        return function (value1) {
            return new CallAPI(value0, value1);
        };
    };
    return CallAPI;
})();
var Get = (function () {
    function Get(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Get.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Get(value0, value1, value2);
            };
        };
    };
    return Get;
})();
var $$Set = (function () {
    function $$Set(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    $$Set.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new $$Set(value0, value1, value2, value3);
                };
            };
        };
    };
    return $$Set;
})();
var Fork = (function () {
    function Fork(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Fork.create = function (value0) {
        return function (value1) {
            return new Fork(value0, value1);
        };
    };
    return Fork;
})();
var DoAff = (function () {
    function DoAff(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DoAff.create = function (value0) {
        return function (value1) {
            return new DoAff(value0, value1);
        };
    };
    return DoAff;
})();
var Await = (function () {
    function Await(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Await.create = function (value0) {
        return function (value1) {
            return new Await(value0, value1);
        };
    };
    return Await;
})();
var Delay = (function () {
    function Delay(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Delay.create = function (value0) {
        return function (value1) {
            return new Delay(value0, value1);
        };
    };
    return Delay;
})();
var OneOf = (function () {
    function OneOf(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    OneOf.create = function (value0) {
        return function (value1) {
            return new OneOf(value0, value1);
        };
    };
    return OneOf;
})();
var HandleError = (function () {
    function HandleError(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    HandleError.create = function (value0) {
        return function (value1) {
            return new HandleError(value0, value1);
        };
    };
    return HandleError;
})();
var CheckPermissions = (function () {
    function CheckPermissions(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CheckPermissions.create = function (value0) {
        return function (value1) {
            return new CheckPermissions(value0, value1);
        };
    };
    return CheckPermissions;
})();
var TakePermissions = (function () {
    function TakePermissions(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TakePermissions.create = function (value0) {
        return function (value1) {
            return new TakePermissions(value0, value1);
        };
    };
    return TakePermissions;
})();
var FlowWrapper = function (x) {
    return x;
};
var wrap = function ($16) {
    return Control_Monad_Free.liftF(FlowWrapper(Data_Exists.mkExists($16)));
};
var withError = function (toMsg) {
    return function (flow) {
        var flow$prime = Control_Bind.bind(Control_Monad_Free.freeBind)(flow)(Data_Either.either(function ($17) {
            return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(ThrowError.create(toMsg($17)));
        })(function ($18) {
            return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(ReturnResult.create($18));
        }));
        return wrap(new HandleError(flow$prime, Control_Category.id(Control_Category.categoryFn)));
    };
};
var throwErr = function (msg) {
    var flow$prime = Control_Applicative.pure(Control_Monad_Free.freeApplicative)(new ThrowError(msg));
    return wrap(new HandleError(flow$prime, Control_Category.id(Control_Category.categoryFn)));
};
var takePermissions = function (permissions) {
    return wrap(new TakePermissions(permissions, Control_Category.id(Control_Category.categoryFn)));
};
var suppress = Data_Functor["void"](Control_Monad_Free.freeFunctor);
var setS = function (key) {
    return function (val) {
        return wrap(new $$Set(InMemoryStore.value, key, val, Data_Unit.unit));
    };
};
var set = function (dictSerializable) {
    return function (key) {
        return function (val) {
            return setS(key)(Presto_Core_Types_Language_Storage.serialize(dictSerializable)(val));
        };
    };
};
var saveS = function (key) {
    return function (val) {
        return wrap(new $$Set(LocalStore.value, key, val, Data_Unit.unit));
    };
};
var save = function (dictSerializable) {
    return function (key) {
        return function (val) {
            return saveS(key)(Presto_Core_Types_Language_Storage.serialize(dictSerializable)(val));
        };
    };
};
var runUI$prime = function (dictInteract) {
    return function (a) {
        return wrap(new RunUI(Presto_Core_Types_Language_Interaction.interact(dictInteract)(a), Control_Category.id(Control_Category.categoryFn)));
    };
};
var runUI = function (dictInteract) {
    return function ($19) {
        return withError(Data_Show.show(Control_Monad_Eff_Exception.showError))(runUI$prime(dictInteract)($19));
    };
};
var showUI = function (dictInteract) {
    return function ($20) {
        return Data_Functor["void"](Control_Monad_Free.freeFunctor)(runUI(dictInteract)($20));
    };
};
var oneOf = function (flows) {
    return wrap(new OneOf(flows, Control_Category.id(Control_Category.categoryFn)));
};
var loadS = function (key) {
    return wrap(new Get(LocalStore.value, key, Control_Category.id(Control_Category.categoryFn)));
};
var load = function (dictSerializable) {
    return function (key) {
        return Control_Bind.bind(Control_Monad_Free.freeBind)(loadS(key))(function (v) {
            return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Control_Bind.bind(Data_Maybe.bindMaybe)(v)(Presto_Core_Types_Language_Storage.deserialize(dictSerializable)));
        });
    };
};
var launch = function (flow) {
    return wrap(new Fork(flow, Control_Category.id(Control_Category.categoryFn)));
};
var getS = function (key) {
    return wrap(new Get(InMemoryStore.value, key, Control_Category.id(Control_Category.categoryFn)));
};
var get = function (dictSerializable) {
    return function (key) {
        return Control_Bind.bind(Control_Monad_Free.freeBind)(getS(key))(function (v) {
            return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Control_Bind.bind(Data_Maybe.bindMaybe)(v)(Presto_Core_Types_Language_Storage.deserialize(dictSerializable)));
        });
    };
};
var forkUI = function (dictInteract) {
    return function (a) {
        return wrap(new ForkUI(Presto_Core_Types_Language_Interaction.interact(dictInteract)(a), Data_Unit.unit));
    };
};
var fork = function (flow) {
    return wrap(new Fork(flow, Control_Category.id(Control_Category.categoryFn)));
};
var evalUI = function (dictInteract) {
    return function (a) {
        return function (from) {
            return withError(Data_Show.show(Control_Monad_Eff_Exception.showError))(wrap(new RunUI(Presto_Core_Types_Language_Interaction.interactConv(dictInteract)(a)(from), Control_Category.id(Control_Category.categoryFn))));
        };
    };
};
var doAff = function (aff) {
    return wrap(new DoAff(aff, Control_Category.id(Control_Category.categoryFn)));
};
var delay = function (duration) {
    return wrap(new Delay(duration, Data_Unit.unit));
};
var checkPermissions = function (permissions) {
    return wrap(new CheckPermissions(permissions, Control_Category.id(Control_Category.categoryFn)));
};
var callAPI = function (dictEncode) {
    return function (dictDecode) {
        return function (dictRestEndpoint) {
            return function (headers) {
                return function (a) {
                    return wrap(new CallAPI(Presto_Core_Types_Language_APIInteract.apiInteract(dictEncode)(dictDecode)(dictRestEndpoint)(a)(headers), Control_Category.id(Control_Category.categoryFn)));
                };
            };
        };
    };
};
var await$prime = function (control) {
    return Data_Functor["void"](Control_Monad_Free.freeFunctor)(wrap(new Await(control, Control_Category.id(Control_Category.categoryFn))));
};
var $$await = function (control) {
    return wrap(new Await(control, Control_Category.id(Control_Category.categoryFn)));
};
module.exports = {
    RegistrationTokens: RegistrationTokens, 
    Control: Control, 
    ThrowError: ThrowError, 
    ReturnResult: ReturnResult, 
    RunUI: RunUI, 
    ForkUI: ForkUI, 
    CallAPI: CallAPI, 
    Get: Get, 
    "Set": $$Set, 
    Fork: Fork, 
    DoAff: DoAff, 
    Await: Await, 
    Delay: Delay, 
    OneOf: OneOf, 
    HandleError: HandleError, 
    CheckPermissions: CheckPermissions, 
    TakePermissions: TakePermissions, 
    FlowWrapper: FlowWrapper, 
    LocalStore: LocalStore, 
    InMemoryStore: InMemoryStore, 
    "await": $$await, 
    "await'": await$prime, 
    callAPI: callAPI, 
    checkPermissions: checkPermissions, 
    delay: delay, 
    doAff: doAff, 
    evalUI: evalUI, 
    fork: fork, 
    forkUI: forkUI, 
    get: get, 
    getS: getS, 
    launch: launch, 
    load: load, 
    loadS: loadS, 
    oneOf: oneOf, 
    runUI: runUI, 
    "runUI'": runUI$prime, 
    save: save, 
    saveS: saveS, 
    set: set, 
    setS: setS, 
    showUI: showUI, 
    suppress: suppress, 
    takePermissions: takePermissions, 
    throwErr: throwErr, 
    withError: withError, 
    wrap: wrap
};
