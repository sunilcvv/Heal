// Generated by purs version 0.11.6
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Tuple = require("../Data.Tuple");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");
var loop = function (dictMonadRec) {
    return function ($76) {
        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Control_Monad_Rec_Class.Loop.create($76));
    };
};
var liftIfM = function (dictApply) {
    return function (dictBind) {
        return function ($77) {
            return Control_Apply.lift2(dictApply)(Control_Bind.ifM(dictBind)($77));
        };
    };
};
var done = function (dictMonadRec) {
    return function ($78) {
        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Control_Monad_Rec_Class.Done.create($78));
    };
};
var iterateUntilM = function (dictMonadRec) {
    return function (p) {
        return function (f) {
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (v) {
                var $54 = p(v);
                if ($54) {
                    return done(dictMonadRec)(v);
                };
                return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(f(v));
            });
        };
    };
};
var iterateUntil = function (dictMonadRec) {
    return function (p) {
        return function (x) {
            return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(x)(iterateUntilM(dictMonadRec)(p)(Data_Function["const"](x)));
        };
    };
};
var iterateWhile = function (dictMonadRec) {
    return function (p) {
        return iterateUntil(dictMonadRec)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(p));
    };
};
var orM = function (dictMonadRec) {
    var go = function (v) {
        if (v instanceof Data_List_Types.Nil) {
            return done(dictMonadRec)(false);
        };
        if (v instanceof Data_List_Types.Cons) {
            return Control_Bind.ifM((dictMonadRec.Monad0()).Bind1())(v.value0)(done(dictMonadRec)(true))(loop(dictMonadRec)(v.value1));
        };
        throw new Error("Failed pattern match at Control.Monad.Rec.Loops line 140, column 3 - line 140, column 25: " + [ v.constructor.name ]);
    };
    return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
};
var unfoldrM$prime = function (dictMonadRec) {
    return function (dictApplicative) {
        return function (dictMonoid) {
            return function (f) {
                var go = function (xs) {
                    return function (z) {
                        return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(z))(Data_Maybe.maybe(done(dictMonadRec)(xs))(function (v) {
                            return loop(dictMonadRec)({
                                a: Data_Semigroup.append(dictMonoid.Semigroup0())(xs)(Control_Applicative.pure(dictApplicative)(v.value0)), 
                                b: v.value1
                            });
                        }));
                    };
                };
                return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(Data_Monoid.mempty(dictMonoid));
            };
        };
    };
};
var unfoldrM = function (dictMonadRec) {
    return unfoldrM$prime(dictMonadRec)(Control_Applicative.applicativeArray)(Data_Monoid.monoidArray);
};
var untilJust = function (dictMonadRec) {
    return function (m) {
        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Data_Function["const"](Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(m)(Data_Maybe.maybe(loop(dictMonadRec)(Data_Unit.unit))(done(dictMonadRec)))))(Data_Unit.unit);
    };
};
var untilM_ = function (dictMonadRec) {
    return function (f) {
        return function (p) {
            return Control_Apply.applySecond(((dictMonadRec.Monad0()).Bind1()).Apply0())(f)(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(liftIfM(Control_Apply.applyFn)((dictMonadRec.Monad0()).Bind1())(p)(done(dictMonadRec))(function ($79) {
                return (function (v) {
                    return Data_Functor.voidLeft((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(f)(v);
                })(Control_Monad_Rec_Class.Loop.create($79));
            }))(Data_Unit.unit));
        };
    };
};
var whileJust_ = function (dictMonadRec) {
    return function (p) {
        return function (f) {
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Data_Function["const"](Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(p)(Data_Maybe.maybe(done(dictMonadRec)(Data_Unit.unit))(function (v) {
                return Data_Functor.voidLeft((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(f(v))(new Control_Monad_Rec_Class.Loop(Data_Unit.unit));
            }))))(Data_Unit.unit);
        };
    };
};
var unfoldM_ = function (dictMonadRec) {
    return Data_Function.flip(whileJust_(dictMonadRec))(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0()));
};
var whileM_ = function (dictMonadRec) {
    return function (p) {
        return function (f) {
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(liftIfM(Control_Apply.applyFn)((dictMonadRec.Monad0()).Bind1())(p)(function ($80) {
                return (function (v) {
                    return Data_Functor.voidLeft((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(f)(v);
                })(Control_Monad_Rec_Class.Loop.create($80));
            })(done(dictMonadRec)))(Data_Unit.unit);
        };
    };
};
var appendM = function (dictMonadRec) {
    return function (dictApplicative) {
        return function (dictSemigroup) {
            return function (xs) {
                return function (f) {
                    return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f)(function ($81) {
                        return loop(dictMonadRec)((function (v) {
                            return Data_Semigroup.append(dictSemigroup)(xs)(v);
                        })(Control_Applicative.pure(dictApplicative)($81)));
                    });
                };
            };
        };
    };
};
var untilM$prime = function (dictMonadRec) {
    return function (dictApplicative) {
        return function (dictSemigroup) {
            return function (f) {
                return function (p) {
                    return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f)(function ($82) {
                        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(liftIfM(Control_Apply.applyFn)((dictMonadRec.Monad0()).Bind1())(p)(done(dictMonadRec))(function (v) {
                            return appendM(dictMonadRec)(dictApplicative)(dictSemigroup)(v)(f);
                        }))(Control_Applicative.pure(dictApplicative)($82));
                    });
                };
            };
        };
    };
};
var untilM = function (dictMonadRec) {
    return untilM$prime(dictMonadRec)(Control_Applicative.applicativeArray)(Data_Semigroup.semigroupArray);
};
var whileJust$prime = function (dictMonadRec) {
    return function (dictApplicative) {
        return function (dictMonoid) {
            return function (p) {
                return function (f) {
                    var go = function (xs) {
                        return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(p)(Data_Maybe.maybe(done(dictMonadRec)(xs))(function ($83) {
                            return (function (v) {
                                return appendM(dictMonadRec)(dictApplicative)(dictMonoid.Semigroup0())(xs)(v);
                            })(f($83));
                        }));
                    };
                    return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_Monoid.mempty(dictMonoid));
                };
            };
        };
    };
};
var unfoldM$prime = function (dictMonadRec) {
    return function (dictApplicative) {
        return function (dictMonoid) {
            return Data_Function.flip(whileJust$prime(dictMonadRec)(dictApplicative)(dictMonoid))(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0()));
        };
    };
};
var unfoldM = function (dictMonadRec) {
    return unfoldM$prime(dictMonadRec)(Control_Applicative.applicativeArray)(Data_Monoid.monoidArray);
};
var whileJust = function (dictMonadRec) {
    return whileJust$prime(dictMonadRec)(Control_Applicative.applicativeArray)(Data_Monoid.monoidArray);
};
var whileM$prime = function (dictMonadRec) {
    return function (dictApplicative) {
        return function (dictMonoid) {
            return function (p) {
                return function (f) {
                    return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(liftIfM(Control_Apply.applyFn)((dictMonadRec.Monad0()).Bind1())(p)(function (v) {
                        return appendM(dictMonadRec)(dictApplicative)(dictMonoid.Semigroup0())(v)(f);
                    })(done(dictMonadRec)))(Data_Monoid.mempty(dictMonoid));
                };
            };
        };
    };
};
var whileM = function (dictMonadRec) {
    return whileM$prime(dictMonadRec)(Control_Applicative.applicativeArray)(Data_Monoid.monoidArray);
};
var anyPM = function (dictMonadRec) {
    return function (mps) {
        return function (x) {
            var go = function (v) {
                if (v instanceof Data_List_Types.Nil) {
                    return done(dictMonadRec)(false);
                };
                if (v instanceof Data_List_Types.Cons) {
                    return Control_Bind.ifM((dictMonadRec.Monad0()).Bind1())(v.value0(x))(done(dictMonadRec)(true))(loop(dictMonadRec)(v.value1));
                };
                throw new Error("Failed pattern match at Control.Monad.Rec.Loops line 148, column 3 - line 148, column 25: " + [ v.constructor.name ]);
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(mps);
        };
    };
};
var anyM = function (dictMonadRec) {
    return function (p) {
        var go = function (v) {
            if (v instanceof Data_List_Types.Nil) {
                return done(dictMonadRec)(false);
            };
            if (v instanceof Data_List_Types.Cons) {
                return Control_Bind.ifM((dictMonadRec.Monad0()).Bind1())(p(v.value0))(done(dictMonadRec)(true))(loop(dictMonadRec)(v.value1));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Loops line 162, column 3 - line 162, column 25: " + [ v.constructor.name ]);
        };
        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
    };
};
var andM = function (dictMonadRec) {
    var go = function (v) {
        if (v instanceof Data_List_Types.Nil) {
            return done(dictMonadRec)(true);
        };
        if (v instanceof Data_List_Types.Cons) {
            return Control_Bind.ifM((dictMonadRec.Monad0()).Bind1())(v.value0)(loop(dictMonadRec)(v.value1))(done(dictMonadRec)(false));
        };
        throw new Error("Failed pattern match at Control.Monad.Rec.Loops line 134, column 3 - line 134, column 24: " + [ v.constructor.name ]);
    };
    return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
};
var allPM = function (dictMonadRec) {
    return function (mps) {
        return function (x) {
            var go = function (v) {
                if (v instanceof Data_List_Types.Nil) {
                    return done(dictMonadRec)(true);
                };
                if (v instanceof Data_List_Types.Cons) {
                    return Control_Bind.ifM((dictMonadRec.Monad0()).Bind1())(v.value0(x))(loop(dictMonadRec)(v.value1))(done(dictMonadRec)(false));
                };
                throw new Error("Failed pattern match at Control.Monad.Rec.Loops line 156, column 3 - line 156, column 24: " + [ v.constructor.name ]);
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(mps);
        };
    };
};
var allM = function (dictMonadRec) {
    return function (p) {
        var go = function (v) {
            if (v instanceof Data_List_Types.Nil) {
                return done(dictMonadRec)(true);
            };
            if (v instanceof Data_List_Types.Cons) {
                return Control_Bind.ifM((dictMonadRec.Monad0()).Bind1())(p(v.value0))(loop(dictMonadRec)(v.value1))(done(dictMonadRec)(false));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Loops line 168, column 3 - line 168, column 24: " + [ v.constructor.name ]);
        };
        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
    };
};
module.exports = {
    allM: allM, 
    allPM: allPM, 
    andM: andM, 
    anyM: anyM, 
    anyPM: anyPM, 
    iterateUntil: iterateUntil, 
    iterateUntilM: iterateUntilM, 
    iterateWhile: iterateWhile, 
    orM: orM, 
    unfoldM: unfoldM, 
    "unfoldM'": unfoldM$prime, 
    unfoldM_: unfoldM_, 
    unfoldrM: unfoldrM, 
    "unfoldrM'": unfoldrM$prime, 
    untilJust: untilJust, 
    untilM: untilM, 
    "untilM'": untilM$prime, 
    untilM_: untilM_, 
    whileJust: whileJust, 
    "whileJust'": whileJust$prime, 
    whileJust_: whileJust_, 
    whileM: whileM, 
    "whileM'": whileM$prime, 
    whileM_: whileM_
};
