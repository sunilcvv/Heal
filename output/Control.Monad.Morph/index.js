// Generated by purs version 0.11.6
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Category = require("../Control.Category");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans");
var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans");
var Control_Monad_RWS_Trans = require("../Control.Monad.RWS.Trans");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Either = require("../Data.Either");
var Data_Functor = require("../Data.Functor");
var Data_Functor_Compose = require("../Data.Functor.Compose");
var Data_Functor_Product = require("../Data.Functor.Product");
var Data_Identity = require("../Data.Identity");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Tuple = require("../Data.Tuple");
var Prelude = require("../Prelude");
var MFunctor = function (hoist) {
    this.hoist = hoist;
};
var MMonad = function (MFunctor0, MonadTrans1, embed) {
    this.MFunctor0 = MFunctor0;
    this.MonadTrans1 = MonadTrans1;
    this.embed = embed;
};
var mfunctorWriterT = new MFunctor(function (dictMonad) {
    return function (nat) {
        return function (m) {
            return nat(Control_Monad_Writer_Trans.runWriterT(m));
        };
    };
});
var mmonadWriterT = function (dictMonoid) {
    return new MMonad(function () {
        return mfunctorWriterT;
    }, function () {
        return Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid);
    }, function (dictMonad) {
        return function (f) {
            return function (m) {
                return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_Writer_Trans.runWriterT(f(Control_Monad_Writer_Trans.runWriterT(m))))(function (v) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value0.value1)(v.value1)));
                });
            };
        };
    });
};
var mfunctorStateT = new MFunctor(function (dictMonad) {
    return function (nat) {
        return function (m) {
            return function (s) {
                return nat(Control_Monad_State_Trans.runStateT(m)(s));
            };
        };
    };
});
var mfunctorReaderT = new MFunctor(function (dictMonad) {
    return function (nat) {
        return function (m) {
            return function (i) {
                return nat(Control_Monad_Reader_Trans.runReaderT(m)(i));
            };
        };
    };
});
var mmonadReaderT = new MMonad(function () {
    return mfunctorReaderT;
}, function () {
    return Control_Monad_Reader_Trans.monadTransReaderT;
}, function (dictMonad) {
    return function (f) {
        return function (m) {
            return function (i) {
                return Control_Monad_Reader_Trans.runReaderT(f(Control_Monad_Reader_Trans.runReaderT(m)(i)))(i);
            };
        };
    };
});
var mfunctorRWS = new MFunctor(function (dictMonad) {
    return function (nat) {
        return function (m) {
            return function (r) {
                return function (s) {
                    return nat(Control_Monad_RWS_Trans.runRWST(m)(r)(s));
                };
            };
        };
    };
});
var mfunctorProduct = new MFunctor(function (dictMonad) {
    return function (nat) {
        return function (v) {
            return new Data_Tuple.Tuple(v.value0, nat(v.value1));
        };
    };
});
var mfunctorMaybe = new MFunctor(function (dictMonad) {
    return function (nat) {
        return function (m) {
            return nat(Control_Monad_Maybe_Trans.runMaybeT(m));
        };
    };
});
var mmonadMaybeT = new MMonad(function () {
    return mfunctorMaybe;
}, function () {
    return Control_Monad_Maybe_Trans.monadTransMaybeT;
}, function (dictMonad) {
    return function (f) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_Maybe_Trans.runMaybeT(f(Control_Monad_Maybe_Trans.runMaybeT(m))))(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Maybe.Nothing) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Maybe.Just) {
                        return new Data_Maybe.Just(v.value0.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Morph line 103, column 10 - line 106, column 30: " + [ v.constructor.name ]);
                })());
            });
        };
    };
});
var mfunctorExceptT = new MFunctor(function (dictMonad) {
    return function (nat) {
        return function (m) {
            return nat(Control_Monad_Except_Trans.runExceptT(m));
        };
    };
});
var mmonadExceptT = new MMonad(function () {
    return mfunctorExceptT;
}, function () {
    return Control_Monad_Except_Trans.monadTransExceptT;
}, function (dictMonad) {
    return function (f) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_Except_Trans.runExceptT(f(Control_Monad_Except_Trans.runExceptT(m))))(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                    if (v instanceof Data_Either.Left) {
                        return new Data_Either.Left(v.value0);
                    };
                    if (v instanceof Data_Either.Right && v.value0 instanceof Data_Either.Left) {
                        return new Data_Either.Left(v.value0.value0);
                    };
                    if (v instanceof Data_Either.Right && v.value0 instanceof Data_Either.Right) {
                        return new Data_Either.Right(v.value0.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Morph line 95, column 10 - line 98, column 33: " + [ v.constructor.name ]);
                })());
            });
        };
    };
});
var mfunctorCompose = function (dictFunctor) {
    return new MFunctor(function (dictMonad) {
        return function (nat) {
            return function (v) {
                return Data_Functor.map(dictFunctor)(nat)(v);
            };
        };
    });
};
var hoist = function (dict) {
    return dict.hoist;
};
var generalize = function (dictMonad) {
    return function ($51) {
        return Control_Applicative.pure(dictMonad.Applicative0())(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($51));
    };
};
var embed = function (dict) {
    return dict.embed;
};
var flipEmbed = function (dictMMonad) {
    return function (dictMonad) {
        return function (t) {
            return function (f) {
                return embed(dictMMonad)(dictMonad)(f)(t);
            };
        };
    };
};
var squash = function (dictMonad) {
    return function (dictMMonad) {
        return embed(dictMMonad)(dictMonad)(Control_Category.id(Control_Category.categoryFn));
    };
};
var composeKleisliRight = function (dictMMonad) {
    return function (dictMonad) {
        return function (f) {
            return function (g) {
                return function (m) {
                    return embed(dictMMonad)(dictMonad)(g)(f(m));
                };
            };
        };
    };
};
var composeKleisliLeft = function (dictMMonad) {
    return function (dictMonad) {
        return function (g) {
            return function (f) {
                return function (m) {
                    return embed(dictMMonad)(dictMonad)(g)(f(m));
                };
            };
        };
    };
};
module.exports = {
    MFunctor: MFunctor, 
    MMonad: MMonad, 
    composeKleisliLeft: composeKleisliLeft, 
    composeKleisliRight: composeKleisliRight, 
    embed: embed, 
    flipEmbed: flipEmbed, 
    generalize: generalize, 
    hoist: hoist, 
    squash: squash, 
    mfunctorExceptT: mfunctorExceptT, 
    mfunctorMaybe: mfunctorMaybe, 
    mfunctorReaderT: mfunctorReaderT, 
    mfunctorWriterT: mfunctorWriterT, 
    mfunctorStateT: mfunctorStateT, 
    mfunctorRWS: mfunctorRWS, 
    mfunctorCompose: mfunctorCompose, 
    mfunctorProduct: mfunctorProduct, 
    mmonadExceptT: mmonadExceptT, 
    mmonadMaybeT: mmonadMaybeT, 
    mmonadReaderT: mmonadReaderT, 
    mmonadWriterT: mmonadWriterT
};
