// Generated by purs version 0.11.6
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Data_Either = require("../Data.Either");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Data_String_Regex = require("../Data.String.Regex");
var Data_Unit = require("../Data.Unit");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var Test_Spec_Reporter_Base = require("../Test.Spec.Reporter.Base");
var Test_Spec_Runner = require("../Test.Spec.Runner");
var Test_Spec_Runner_Event = require("../Test.Spec.Runner.Event");
var Test_Spec_Summary = require("../Test.Spec.Summary");
var escTitle = (function () {
    var rex = Data_Either.fromRight()(Data_String_Regex.regex("#")(Data_String_Regex.parseFlags("g")));
    return Data_String_Regex.replace(rex)("");
})();
var escMsg = (function () {
    var rex = Data_Either.fromRight()(Data_String_Regex.regex("^")(Data_String_Regex.parseFlags("gm")));
    return Data_String_Regex.replace(rex)("  ");
})();
var tapReporter = (function () {
    var update = function (n) {
        return function (v) {
            if (v instanceof Test_Spec_Runner_Event.Start) {
                return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(n)(Control_Monad_Eff_Console.log("1.." + Data_Show.show(Data_Show.showInt)(v.value0)));
            };
            if (v instanceof Test_Spec_Runner_Event.TestEnd) {
                return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(n + 1 | 0);
            };
            if (v instanceof Test_Spec_Runner_Event.Pending) {
                return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(n)(Control_Monad_Eff_Console.log("ok " + (Data_Show.show(Data_Show.showInt)(n) + (" " + (escTitle(v.value0) + " # SKIP -")))));
            };
            if (v instanceof Test_Spec_Runner_Event.Pass) {
                return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(n)(Control_Monad_Eff_Console.log("ok " + (Data_Show.show(Data_Show.showInt)(n) + (" " + escTitle(v.value0)))));
            };
            if (v instanceof Test_Spec_Runner_Event.Fail) {
                return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(n)(function __do() {
                    Control_Monad_Eff_Console.log("not ok " + (Data_Show.show(Data_Show.showInt)(n) + (" " + escTitle(v.value0))))();
                    Control_Monad_Eff_Console.log(escMsg(v.value1))();
                    if (v.value2 instanceof Data_Maybe.Nothing) {
                        return Data_Unit.unit;
                    };
                    if (v.value2 instanceof Data_Maybe.Just) {
                        return Control_Monad_Eff_Console.log(Data_String.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(Data_Semigroup.append(Data_Semigroup.semigroupString)("    "))(Data_String.split("\x0a")(v.value2.value0))))();
                    };
                    throw new Error("Failed pattern match at Test.Spec.Reporter.Tap line 33, column 7 - line 35, column 82: " + [ v.value2.constructor.name ]);
                });
            };
            if (v instanceof Test_Spec_Runner_Event.End) {
                return function __do() {
                    (function () {
                        var v1 = Test_Spec_Summary.summarize(v.value0);
                        return function __do() {
                            Control_Monad_Eff_Console.log("# tests " + Data_Show.show(Data_Show.showInt)((v1.value1 + v1.value0 | 0) + v1.value2 | 0))();
                            Control_Monad_Eff_Console.log("# pass " + Data_Show.show(Data_Show.showInt)(v1.value0 + v1.value2 | 0))();
                            return Control_Monad_Eff_Console.log("# fail " + Data_Show.show(Data_Show.showInt)(v1.value1))();
                        };
                    })()();
                    return n;
                };
            };
            return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(n);
        };
    };
    return Test_Spec_Reporter_Base.defaultReporter(1)(update);
})();
module.exports = {
    tapReporter: tapReporter
};
