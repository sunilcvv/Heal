// Generated by purs version 0.11.6
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Array = require("../Data.Array");
var Data_Boolean = require("../Data.Boolean");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");
var Test_Spec_Color = require("../Test.Spec.Color");
var Test_Spec_Console = require("../Test.Spec.Console");
var Test_Spec_Reporter_Base = require("../Test.Spec.Reporter.Base");
var Test_Spec_Runner = require("../Test.Spec.Runner");
var Test_Spec_Runner_Event = require("../Test.Spec.Runner.Event");
var Test_Spec_Summary = require("../Test.Spec.Summary");
var pushCrumb = function (c) {
    return function (s) {
        var $6 = {};
        for (var $7 in s) {
            if ({}.hasOwnProperty.call(s, $7)) {
                $6[$7] = s[$7];
            };
        };
        $6.crumbs = Data_Semigroup.append(Data_Semigroup.semigroupArray)(s.crumbs)([ c ]);
        $6.crumbsChanged = true;
        return $6;
    };
};
var popCrumb = function (s) {
    var $9 = {};
    for (var $10 in s) {
        if ({}.hasOwnProperty.call(s, $10)) {
            $9[$10] = s[$10];
        };
    };
    $9.crumbs = Data_Maybe.fromMaybe([  ])(Data_Array.init(s.crumbs));
    $9.crumbsChanged = true;
    return $9;
};
var pluralize = function (s) {
    return function (v) {
        if (v === 1) {
            return s;
        };
        return s + "s";
    };
};
var printPassedFailed = function (p) {
    return function (f) {
        var total = p + f | 0;
        var testStr = pluralize("test")(total);
        var attrs = (function () {
            var $14 = f > 0;
            if ($14) {
                return [ 31 ];
            };
            return [ 32 ];
        })();
        var amount = Data_Show.show(Data_Show.showInt)(p) + ("/" + (Data_Show.show(Data_Show.showInt)(total) + (" " + (testStr + " passed"))));
        return Test_Spec_Console.withAttrs(attrs)(Control_Monad_Eff_Console.log(amount));
    };
};
var printPending = function (p) {
    if (p > 0) {
        return Test_Spec_Console.withAttrs([ 33 ])(Control_Monad_Eff_Console.log(Data_Show.show(Data_Show.showInt)(p) + (" " + (pluralize("test")(p) + " pending"))));
    };
    if (Data_Boolean.otherwise) {
        return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
    };
    throw new Error("Failed pattern match at Test.Spec.Reporter.Console line 88, column 1 - line 88, column 67: " + [ p.constructor.name ]);
};
var initialState = {
    crumbs: [  ], 
    crumbsChanged: false, 
    hasEmitted: false
};
var consoleReporter = (function () {
    var update = function (s) {
        var printSummary = function ($34) {
            return (function (v) {
                return function __do() {
                    Control_Monad_Eff_Console.log("")();
                    Test_Spec_Console.withAttrs([ 1 ])(Control_Monad_Eff_Console.log("Summary"))();
                    printPassedFailed(v.value0)(v.value1)();
                    printPending(v.value2)();
                    return Control_Monad_Eff_Console.log("")();
                };
            })(Test_Spec_Summary.summarize($34));
        };
        var flushCrumbs = function (action) {
            var $20 = !s.crumbsChanged;
            if ($20) {
                return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(s)(action);
            };
            return Data_Functor.voidRight(Control_Monad_Eff.functorEff)((function () {
                var $21 = {};
                for (var $22 in s) {
                    if ({}.hasOwnProperty.call(s, $22)) {
                        $21[$22] = s[$22];
                    };
                };
                $21.crumbsChanged = false;
                $21.hasEmitted = true;
                return $21;
            })())(function __do() {
                Control_Applicative.when(Control_Monad_Eff.applicativeEff)(s.hasEmitted)(Control_Monad_Eff_Console.log(""))();
                Test_Spec_Console.withAttrs([ 1, 35 ])(Control_Monad_Eff_Console.log(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" \xbb ")(s.crumbs)))();
                return action();
            });
        };
        return function (v) {
            if (v instanceof Test_Spec_Runner_Event.Suite) {
                return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(pushCrumb(v.value0)(s));
            };
            if (v instanceof Test_Spec_Runner_Event.SuiteEnd) {
                return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(popCrumb(s));
            };
            if (v instanceof Test_Spec_Runner_Event.Pass) {
                return flushCrumbs(Control_Monad_Eff_Console.log("  " + (Test_Spec_Color.colored(Test_Spec_Color.Checkmark.value)("\u2713\ufe0e") + (" " + Test_Spec_Color.colored(Test_Spec_Color.Pass.value)(v.value0)))));
            };
            if (v instanceof Test_Spec_Runner_Event.Pending) {
                return flushCrumbs(Control_Monad_Eff_Console.log("  " + Test_Spec_Color.colored(Test_Spec_Color.Pending.value)("~ " + v.value0)));
            };
            if (v instanceof Test_Spec_Runner_Event.Fail) {
                return flushCrumbs(function __do() {
                    Control_Monad_Eff_Console.log("  " + Test_Spec_Color.colored(Test_Spec_Color.Fail.value)("\u2717 " + (v.value0 + ":")))();
                    Control_Monad_Eff_Console.log("")();
                    return Control_Monad_Eff_Console.log(Test_Spec_Color.colored(Test_Spec_Color.Fail.value)("  " + v.value1))();
                });
            };
            if (v instanceof Test_Spec_Runner_Event.End) {
                return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(s)(printSummary(v.value0));
            };
            return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(s);
        };
    };
    return Test_Spec_Reporter_Base.defaultReporter(initialState)(update);
})();
module.exports = {
    consoleReporter: consoleReporter
};
