// Generated by purs version 0.11.6
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Category = require("../Control.Category");
var Control_Monad = require("../Control.Monad");
var Control_Monad_Eff_Class = require("../Control.Monad.Eff.Class");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans");
var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class");
var Control_Monad_State_Class = require("../Control.Monad.State.Class");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class");
var Control_Plus = require("../Control.Plus");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Either = require("../Data.Either");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Tuple = require("../Data.Tuple");
var Data_Unit = require("../Data.Unit");
var Pipes = require("../Pipes");
var Pipes_Core = require("../Pipes.Core");
var Pipes_Internal = require("../Pipes.Internal");
var Prelude = require("../Prelude");
var Select = function (x) {
    return x;
};
var Enumerable = function (toListT) {
    this.toListT = toListT;
};
var toListT = function (dict) {
    return dict.toListT;
};
var maybeTEnumerable = new Enumerable(function (dictMonad) {
    return function (m) {
        return Select(Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(dictMonad)(Control_Monad_Maybe_Trans.runMaybeT(m)))(function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(Pipes_Internal.applicativeProxy(dictMonad))(Data_Unit.unit);
            };
            if (v instanceof Data_Maybe.Just) {
                return Pipes["yield"](dictMonad)(v.value0);
            };
            throw new Error("Failed pattern match at Pipes.ListT line 124, column 9 - line 126, column 31: " + [ v.constructor.name ]);
        }));
    };
});
var listTMonadTrans = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
        return Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(dictMonad)(m))(Pipes["yield"](dictMonad));
    };
});
var listTFunctor = function (dictMonad) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Pipes["for"](dictMonad)(v)(function ($92) {
                return Pipes["yield"](dictMonad)(f($92));
            });
        };
    });
};
var listTEnumerable = new Enumerable(function (dictMonad) {
    return Control_Category.id(Control_Category.categoryFn);
});
var listTApply = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return listTFunctor(dictMonad);
    }, function (v) {
        return function (v1) {
            return Pipes["for"](dictMonad)(v)(function (f) {
                return Pipes["for"](dictMonad)(v1)(function (x) {
                    return Pipes["yield"](dictMonad)(f(x));
                });
            });
        };
    });
};
var listTApplicative = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return listTApply(dictMonad);
    }, function ($93) {
        return Select(Pipes["yield"](dictMonad)($93));
    });
};
var listTAlt = function (dictMonad) {
    return new Control_Alt.Alt(function () {
        return listTFunctor(dictMonad);
    }, function (v) {
        return function (v1) {
            return Control_Apply.applySecond(Pipes_Internal.applyProxy(dictMonad))(v)(v1);
        };
    });
};
var listTPlus = function (dictMonad) {
    return new Control_Plus.Plus(function () {
        return listTAlt(dictMonad);
    }, Control_Applicative.pure(Pipes_Internal.applicativeProxy(dictMonad))(Data_Unit.unit));
};
var listTAlternative = function (dictMonad) {
    return new Control_Alternative.Alternative(function () {
        return listTApplicative(dictMonad);
    }, function () {
        return listTPlus(dictMonad);
    });
};
var listTSemigroup = function (dictMonad) {
    return new Data_Semigroup.Semigroup(Control_Alt.alt(listTAlt(dictMonad)));
};
var listTMonoid = function (dictMonad) {
    return new Data_Monoid.Monoid(function () {
        return listTSemigroup(dictMonad);
    }, Control_Plus.empty(listTPlus(dictMonad)));
};
var errorTEnumerable = new Enumerable(function (dictMonad) {
    return function (m) {
        return Select(Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(dictMonad)(Control_Monad_Except_Trans.runExceptT(m)))(function (v) {
            if (v instanceof Data_Either.Left) {
                return Control_Applicative.pure(Pipes_Internal.applicativeProxy(dictMonad))(Data_Unit.unit);
            };
            if (v instanceof Data_Either.Right) {
                return Pipes["yield"](dictMonad)(v.value0);
            };
            throw new Error("Failed pattern match at Pipes.ListT line 131, column 9 - line 133, column 30: " + [ v.constructor.name ]);
        }));
    };
});
var enumerate = function (v) {
    return v;
};
var every = function (dictMonad) {
    return function (dictEnumerable) {
        return function (it) {
            return Pipes_Core.composeRequest(dictMonad)(Pipes.discard(Pipes_Internal.monadProxy(dictMonad)))(enumerate(toListT(dictEnumerable)(dictMonad)(it)));
        };
    };
};
var listTBind = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return listTApply(dictMonad);
    }, function (v) {
        return function (f) {
            return Pipes["for"](dictMonad)(v)(function ($94) {
                return enumerate(f($94));
            });
        };
    });
};
var listTMonad = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return listTApplicative(dictMonad);
    }, function () {
        return listTBind(dictMonad);
    });
};
var listTMonadAsk = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return listTMonad(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(listTMonadTrans)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var listTMonadReader = function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return listTMonadAsk(dictMonadReader.MonadAsk0());
    }, function (f) {
        return function (v) {
            return Control_Monad_Reader_Class.local(Pipes_Internal.proxyMonadReader(dictMonadReader))(f)(v);
        };
    });
};
var listTMonadEff = function (dictMonadEff) {
    return new Control_Monad_Eff_Class.MonadEff(function () {
        return listTMonad(dictMonadEff.Monad0());
    }, function ($95) {
        return Control_Monad_Trans_Class.lift(listTMonadTrans)(dictMonadEff.Monad0())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($95));
    });
};
var listTMonadState = function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
        return listTMonad(dictMonadState.Monad0());
    }, function ($96) {
        return Control_Monad_Trans_Class.lift(listTMonadTrans)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)($96));
    });
};
var listTMonadTell = function (dictMonoid) {
    return function (dictMonadTell) {
        return new Control_Monad_Writer_Class.MonadTell(function () {
            return listTMonad(dictMonadTell.Monad0());
        }, function ($97) {
            return Control_Monad_Trans_Class.lift(listTMonadTrans)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($97));
        });
    };
};
var listTMonadWriter = function (dictMonoid) {
    return function (dictMonadWriter) {
        return new Control_Monad_Writer_Class.MonadWriter(function () {
            return listTMonadTell(dictMonoid)(dictMonadWriter.MonadTell0());
        }, function (v) {
            var go = function (v1) {
                return function (w) {
                    if (v1 instanceof Pipes_Internal.Request) {
                        return new Pipes_Internal.Request(v1.value0, function (a) {
                            return go(v1.value1(a))(w);
                        });
                    };
                    if (v1 instanceof Pipes_Internal.Respond) {
                        return new Pipes_Internal.Respond(new Data_Tuple.Tuple(v1.value0, w), function (b$prime) {
                            return go(v1.value1(b$prime))(w);
                        });
                    };
                    if (v1 instanceof Pipes_Internal.M) {
                        return new Pipes_Internal.M(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(v1.value0))(function (v2) {
                            return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(go(v2.value0)(Data_Semigroup.append(dictMonoid.Semigroup0())(w)(v2.value1)));
                        }));
                    };
                    if (v1 instanceof Pipes_Internal.Pure) {
                        return new Pipes_Internal.Pure(v1.value0);
                    };
                    throw new Error("Failed pattern match at Pipes.ListT line 86, column 9 - line 86, column 62: " + [ v1.constructor.name, w.constructor.name ]);
                };
            };
            return go(v)(Data_Monoid.mempty(dictMonoid));
        }, function (v) {
            var go = function (v1) {
                return function (w) {
                    if (v1 instanceof Pipes_Internal.Request) {
                        return new Pipes_Internal.Request(v1.value0, function (a) {
                            return go(v1.value1(a))(w);
                        });
                    };
                    if (v1 instanceof Pipes_Internal.Respond) {
                        var _2 = function (v2) {
                            return v1.value0.value1(w);
                        };
                        var _1 = new Pipes_Internal.Respond(v1.value0.value0, function (b$prime) {
                            return go(v1.value1(b$prime))(v1.value0.value1(w));
                        });
                        return new Pipes_Internal.M(Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(_1, _2))));
                    };
                    if (v1 instanceof Pipes_Internal.M) {
                        return new Pipes_Internal.M(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(v1.value0))(function (v2) {
                            return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(go(v2.value0)(Data_Semigroup.append(dictMonoid.Semigroup0())(w)(v2.value1)));
                        }));
                    };
                    if (v1 instanceof Pipes_Internal.Pure) {
                        return new Pipes_Internal.Pure(v1.value0);
                    };
                    throw new Error("Failed pattern match at Pipes.ListT line 95, column 9 - line 95, column 72: " + [ v1.constructor.name, w.constructor.name ]);
                };
            };
            return go(v)(Data_Monoid.mempty(dictMonoid));
        });
    };
};
var listTMonadThrow = function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return listTMonad(dictMonadThrow.Monad0());
    }, function ($98) {
        return Control_Monad_Trans_Class.lift(listTMonadTrans)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)($98));
    });
};
var listTMonadError = function (dictMonadError) {
    return new Control_Monad_Error_Class.MonadError(function () {
        return listTMonadThrow(dictMonadError.MonadThrow0());
    }, function (v) {
        return function (f) {
            return Control_Monad_Error_Class.catchError(Pipes_Internal.proxyMonadError(dictMonadError))(v)(function ($99) {
                return enumerate(f($99));
            });
        };
    });
};
var runListT = function (dictMonad) {
    return function (l) {
        return Pipes_Core.runEffect(dictMonad)(enumerate(Control_Apply.applySecond(listTApply(dictMonad))(l)(Control_Plus.empty(listTPlus(dictMonad)))));
    };
};
var runListTRec = function (dictMonadRec) {
    return function (l) {
        return Pipes_Core.runEffectRec(dictMonadRec)(enumerate(Control_Apply.applySecond(listTApply(dictMonadRec.Monad0()))(l)(Control_Plus.empty(listTPlus(dictMonadRec.Monad0())))));
    };
};
module.exports = {
    Select: Select, 
    Enumerable: Enumerable, 
    enumerate: enumerate, 
    every: every, 
    runListT: runListT, 
    runListTRec: runListTRec, 
    toListT: toListT, 
    listTFunctor: listTFunctor, 
    listTApply: listTApply, 
    listTApplicative: listTApplicative, 
    listTBind: listTBind, 
    listTMonad: listTMonad, 
    listTMonadTrans: listTMonadTrans, 
    listTAlt: listTAlt, 
    listTPlus: listTPlus, 
    listTAlternative: listTAlternative, 
    listTMonadEff: listTMonadEff, 
    listTSemigroup: listTSemigroup, 
    listTMonoid: listTMonoid, 
    listTMonadState: listTMonadState, 
    listTMonadTell: listTMonadTell, 
    listTMonadWriter: listTMonadWriter, 
    listTMonadAsk: listTMonadAsk, 
    listTMonadReader: listTMonadReader, 
    listTMonadThrow: listTMonadThrow, 
    listTMonadError: listTMonadError, 
    listTEnumerable: listTEnumerable, 
    maybeTEnumerable: maybeTEnumerable, 
    errorTEnumerable: errorTEnumerable
};
