// Generated by purs version 0.11.6
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Data_Array = require("../Data.Array");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Prelude = require("../Prelude");
var Test_Spec_Color = require("../Test.Spec.Color");
var Test_Spec_Reporter_Base = require("../Test.Spec.Reporter.Base");
var Test_Spec_Runner = require("../Test.Spec.Runner");
var Test_Spec_Runner_Event = require("../Test.Spec.Runner.Event");
var Test_Spec_Speed = require("../Test.Spec.Speed");
var specReporter = (function () {
    var update = function (s) {
        var modIndent = function (f) {
            return function (fm) {
                var s$prime = (function () {
                    var $6 = {};
                    for (var $7 in s) {
                        if ({}.hasOwnProperty.call(s, $7)) {
                            $6[$7] = s[$7];
                        };
                    };
                    $6.indent = f(s.indent);
                    return $6;
                })();
                return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(s$prime)(fm(s$prime.indent));
            };
        };
        var indent = function (i) {
            return Data_String.fromCharArray(Data_Array.replicate(i)(" "));
        };
        var _log = function (msg) {
            return Control_Monad_Eff_Console.log(indent(s.indent) + msg);
        };
        return function (v) {
            if (v instanceof Test_Spec_Runner_Event.Start) {
                return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(s)(Control_Monad_Eff_Console.log(""));
            };
            if (v instanceof Test_Spec_Runner_Event.Suite) {
                return modIndent(function (v1) {
                    return v1 + 1 | 0;
                })(function (v1) {
                    return _log(v.value0);
                });
            };
            if (v instanceof Test_Spec_Runner_Event.SuiteEnd) {
                return modIndent(function (v1) {
                    return v1 - 1 | 0;
                })(function (i) {
                    return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(i === 1)(Control_Monad_Eff_Console.log(""));
                });
            };
            if (v instanceof Test_Spec_Runner_Event.Pending) {
                return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(s)(_log(Test_Spec_Color.colored(Test_Spec_Color.Pending.value)("- " + v.value0)));
            };
            if (v instanceof Test_Spec_Runner_Event.Pass) {
                return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(s)(_log(Test_Spec_Color.colored(Test_Spec_Color.Checkmark.value)("\u2713\ufe0e") + (" " + (Test_Spec_Color.colored(Test_Spec_Color.Pass.value)(v.value0) + (function () {
                    if (v.value1 instanceof Test_Spec_Speed.Fast) {
                        return "";
                    };
                    var label = " (" + (Data_Show.show(Data_Show.showInt)(v.value2) + "ms)");
                    var col = Test_Spec_Speed.toColor(v.value1);
                    return Test_Spec_Color.colored(col)(label);
                })()))));
            };
            if (v instanceof Test_Spec_Runner_Event.Fail) {
                var s$prime = (function () {
                    var $17 = {};
                    for (var $18 in s) {
                        if ({}.hasOwnProperty.call(s, $18)) {
                            $17[$18] = s[$18];
                        };
                    };
                    $17.numFailures = s.numFailures + 1 | 0;
                    return $17;
                })();
                return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(s$prime)(_log(Test_Spec_Color.colored(Test_Spec_Color.Fail.value)(Data_Show.show(Data_Show.showInt)(s$prime.numFailures) + (") " + v.value0))));
            };
            if (v instanceof Test_Spec_Runner_Event.End) {
                return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(s)(Test_Spec_Reporter_Base.defaultSummary(v.value0));
            };
            return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(s);
        };
    };
    return Test_Spec_Reporter_Base.defaultReporter({
        indent: 0, 
        numFailures: 0
    })(update);
})();
module.exports = {
    specReporter: specReporter
};
